
spring:
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
#    url: jdbc:mysql://127.0.0.1:3306/cps?serverTimezone=GMT%2B8&useUnicode=true&characterEncoding=utf-8
    url: jdbc:mysql://127.0.0.1:3306/cp_lion?serverTimezone=GMT%2B8&useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
    druid:
      # 下面为连接池的补充设置，应用到上面所有数据源中
      # 初始化大小，最小，最大
      initial-size: 5
      min-idle: 5
      max-active: 20
      # 配置获取连接等待超时的时间
      max-wait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 300000
    driver-class-name: com.mysql.cj.jdbc.Driver
     # validation-query: SELECT 1 FROM DUAL
      #test-while-idle: true
      #test-on-borrow: false
      #test-on-return: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
     # pool-prepared-statements: true
      #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
     # max-pool-prepared-statement-per-connection-size: 20
     # filters: stat,wall
     # use-global-data-source-stat: true
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
     # connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
     # web-stat-filter:
        # 添加过滤规则
       # url-pattern: /*
        # 忽略过滤格式
       # exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"
  #禁用favicon.icon
  mvc:
    favicon:
      enabled: false
  #上传单文件50M
  servlet:
    multipart:
      max-request-size: 1024MB # 设置最大的请求文件的大小
      max-file-size: 200MB # 设置单个文件的最大长度
      enabled: true # 启用http上传处理
  http:
    encoding:
      charset: UTF-8

ribbon:
  ReadTimeout: 10000
  ConnectTimeout: 10000

logging:
  level:
    org.springframework: info

iatp:
  fileserver:
    path: D:\\upload

#logging:
  #level:
    #com.aliyun.market: trace
    ##访问swagger会报错，错误原因是定义了Long Integer类型的参数，
    ##官方文档中是允许忽略这个错误，在这里将这块的日志级别调成error,就不会每次访问都报错
    #io.swagger.models.parameters.AbstractSerializableParameter: error
# 缓存时长，单位秒
cache:
  default-exp: 72

#iatp:
  #fileserver:
    #path: C:\\upload

#mybatis
#mybatis:
  # 定义所有操作类的别名所在包
  #type-aliases-package: com.powertime.audiltor.entity
  # 所有的mapper映射文件
  #mapper-locations: classpath:mapper/*.xml
#pagehelper:
  #helperDialect: mysql
  ##当该参数设置为 true 时，pageNum<=0 时会查询第一页， pageNum>pages（超过总数时），会查询最后一页
  #reasonable: false
  #supportMethodsArguments: true
  #params: count=countSql
  ##默认值为 false，当该参数设置为 true 时，如果 pageSize=0 或者 RowBounds.limit = 0 就会查询出全部的结果
 # pageSizeZero: true

mybatis-plus:
  #MyBatis Mapper 所对应的 XML 文件位置，如果您在 Mapper 中有自定义方法（XML 中有自定义实现），需要进行该配置，告诉 Mapper 所对应的 XML 文件位置。
  mapper-locations: classpath:mapper/*.xml
  # MyBaits 别名包扫描路径，通过该属性可以给包中的类注册别名，注册后在 Mapper 对应的 XML 文件中可以直接使用类名，而不用使用全限定的类名（即 XML 中调用的时候不用包含包名）。
  type-aliases-package: com.powertime.audiltor.entity
  #通过该属性可指定 MyBatis 的执行器，MyBatis 的执行器总共有三种：
  #  ExecutorType.SIMPLE：该执行器类型不做特殊的事情，为每个语句的执行创建一个新的预处理语句（PreparedStatement）
  #  ExecutorType.REUSE：该执行器类型会复用预处理语句（PreparedStatement）
  #  ExecutorType.BATCH：该执行器类型会批量执行所有的更新语句
  #  默认值：sample
  executor-type: reuse
  global-config:
    # 是否自动刷新 Mapper 对应的 XML 文件，默认不自动刷新。
    # 如果配置了该属性，Mapper 对应的 XML 文件会自动刷新，更改 XML 文件后，无需再次重启工程，由此节省大量时间。
    # 生产环境改成false
    refresh: true
    # 是否缓存 Sql 解析，默认不缓存。
    sql-parser-cache: false
    db-config:
      # 数据库类型,默认值为未知的数据库类型 如果值为OTHER,启动时会根据数据库连接url获取数据库类型;如果不是OTHER则不会自动获取数据库类型
      db-type: mysql
      # 全局默认主键类型
      id-type: id_worker
      # 逻辑已删除值
      logic-delete-value: 0
      # 逻辑未删除值
      logic-not-delete-value: 1
      field-strategy: not_empty
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: false
server:
  port: 8888
  # 设置数据库相关属性
